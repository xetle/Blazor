@page "/"
@using Eccentricity
@using System.ComponentModel.DataAnnotations
@inject Calculator Calculator

<h1>Eccentricity Functions <em>G<sub>lpq</sub></em></h1>

<p>Calculate eccentricity functions for <em>l=2</em>. <em>G<sub>2pq</sub></em></p>
<br />

<EditForm Model="@parameters" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            p:
            <InputNumber @bind-Value="parameters.p" />
        </label>
    </p>

    <p>
        <label>
            k:
            <InputNumber @bind-Value="parameters.k" />
        </label>
    </p>

    <button type="submit">Submit</button>
    <br />
    <br />

    @if (dictResult != null)
    {
        foreach (var item in dictResult)
        {
            <p />

            if (item.Key == Key.k1)
            {
                <span>Results for <em>c<sub>@parameters.k<sub>1</sub></sub></em> = </span>
            }
            else if (item.Key == Key.k2)
            {
                <span>Results for <em>c<sub>@parameters.k<sub>2</sub></sub></em> = </span>
            }
            else if (item.Key == Key.Sum)
            {
                <span>Results for <em>c<sub>@parameters.k</sub></em> = </span>
            }

            var finalSeries = item.Value;

            bool firstTerm = true;

            for (int i = 0; i < finalSeries.Count; i++)
            {
                var term = finalSeries[i];

                if (term.Numerator != 0)
                {
                    if (term.Numerator > 0 && !firstTerm)
                    {
                        <span> + </span>
                    }

                    if (term.Numerator < 0)
                    {
                        <span> - </span>
                    }
                    firstTerm = false;

                    var absNumerator = Math.Abs(term.Numerator);

                    // no need to display 1 in numerator
                    if (@term.Denominator == 1 && absNumerator == 1 && i == 0)
                    {
                        <span>1</span>
                    }
                    else if (i == 0) // then we are raising e to a power of 0 - which is just 1
                    {
                        <span><sup>@absNumerator</sup>&frasl;<sub>@term.Denominator</sub></span>
                    }
                    else if (i == 1) // then we are not raising e to a power > 1 so it's just e
                    {
                        if (absNumerator > 1)
                        {
                            <span><sup>@absNumerator</sup></span>
                        }
                        <span><sup>e</sup>&frasl;<sub>@term.Denominator</sub></span>
                    }
                    else
                    {
                        if (absNumerator > 1)
                        {
                            <span><sup>@absNumerator</sup></span>
                        }
                        <span><sup>e<sup>@i</sup></sup>&frasl;<sub>@term.Denominator</sub></span>
                    }
                }
            }
        };
        <p />

        <h2>Hansen Coefficients</h2>

        var n = -3;
        var m = 2 - 2 * parameters.p;
        var k = parameters.k;

        <p>
            Hansen eccentricity functions have the notation <em>X<span class="supsub"><sup>n,m</sup><sub>k</sub></span></em>
            <span> where <em>n=-(l+1)</em> and <em>m=2-2p</em> and <em>k=k</em> as above.</span>
        </p>

        <p>From the pdf, we have
        <span> <em>2c<sub>k<sub>1</sub></sub> = X<span class="supsub"><sup>@n,m</sup><sub>k</sub></span></em></span>
        <span>and <em> 2c<sub>k<sub>2</sub></sub> = X<span class="supsub"><sup>@n,-m</sup><sub>k</sub></span></em></span>
        </p>

        <span><em>X<span class="supsub"><sup>@n,@m</sup><sub>@k</sub></span></em></span>
    }
</EditForm>

@code {
    private Dictionary<Key, List<Fraction>> dictResult;
    private Parameters parameters = new Parameters();

    private void HandleValidSubmit()
    {
        dictResult = Calculator.Calculate(parameters.p, parameters.k);
    }

    public class Parameters
    {
        [Range(0, 2, ErrorMessage = "p must be 0, 1 or 2")]
        public int p { get; set; }

        public int k { get; set; }
    }
}
